import common
from discord.ui import View, Select
import asyncio
import sqlite3
import json

# class Tickets(common.commands.Cog):
all_admin_roles = ['–°–æ–∑–¥–∞—Ç–µ–ª—å','–¢–µ—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä','–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä','–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä','–°—Ç. –†–ü –ö—É—Ä–∞—Ç–æ—Ä']
MODERATOR_ID = 1009677024819937371
    # def __init__(self, bot):
    #     self.bot = bot


            
class OpenView(common.discord.ui.View): # Create a class called MyView that subclasses common.discord.ui.View
    CAT_ADM_COMPLAINS = 1010800079789105182
    CAT_UNBAN = 1010808324742193182
    CAT_PLR_COMPLAINS = 1010796625473568798
    CAT_RETURNS = 1010786296995795014
    CAT_TEAM = 1016401128377823232

    def __init__(self, close_view_cls, disable_on_timeout=True):
        super().__init__(timeout=None, disable_on_timeout=True)
        self.close_view_cls = close_view_cls

    @common.discord.ui.select( # the decorator that lets you specify the properties of the select menu
    placeholder = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤", # the placeholder text that will be displayed if nothing is selected
    min_values = 1, # the minimum number of values that must be selected by the users
    max_values = 1, # the maximum number of values that can be selected by the users
    custom_id = "selectPreview",
    options = [ # the list of options from which users can choose, a required field
        common.discord.SelectOption(
            label="‚îÇ–ó–∞—è–≤–∫–∞ –≤ –û-–°–æ–∑–Ω–∞–Ω–∏–µ",
            emoji="üìÆ",
            description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞"
        ),
        common.discord.SelectOption(
            label="‚îÇ–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞",
            emoji="‚õ≥",
            description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∂–∞–ª–æ–± –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤"
        ),
        common.discord.SelectOption(
            label="‚îÇ–ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é",
            emoji="üé´",
            description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é"
        ),
        common.discord.SelectOption(
            label="‚îÇ–í–æ–∑–≤—Ä–∞—Ç –≤–µ—â–µ–π",
            emoji="üåå",
            description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤–µ—â–µ–π"
        ),
        common.discord.SelectOption(
            label="‚îÇ–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω",
            emoji="üå†",
            description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–±–∞–Ω –≤ –∏–≥—Ä–µ"
        )
    ]
    )
    async def select_callback(self, select, interaction): # the function called when the user is done selecting options
        #await interaction.response.send_message(f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ {select.values[0]}")
        '''
        –ñ–∞–ª–æ–±—ã –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é = 1010800079789105182
        –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–±–∞–Ω = 1010808324742193182
        –ñ–∞–ª–æ–±—ã –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ = 1010796625473568798
        –í–æ–∑–≤—Ä–∞—Ç –≤–µ—â–µ–π = 1010786296995795014
        –ó–∞—è–≤–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—É = 1016401128377823232
        '''
        ctx = interaction.channel
        category_id = 1010960851362140171#placeholder
        if select.values[0] in "‚îÇ–ó–∞—è–≤–∫–∞ –≤ –û-–°–æ–∑–Ω–∞–Ω–∏–µ":
            category_id = self.CAT_TEAM
        elif  select.values[0] in "‚îÇ–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞":
            category_id = self.CAT_PLR_COMPLAINS
        elif  select.values[0] in "‚îÇ–ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é":
            category_id = self.CAT_ADM_COMPLAINS
        elif  select.values[0] in "‚îÇ–í–æ–∑–≤—Ä–∞—Ç –≤–µ—â–µ–π":
            category_id = self.CAT_RETURNS
        elif  select.values[0] in "‚îÇ–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω":
            category_id = self.CAT_UNBAN
        category = ctx.guild.get_channel(category_id)
        if category:
            ticket_channel = await category.create_text_channel(name=f'ticket-{interaction.user.name}')

            await ticket_channel.set_permissions(ctx.guild.default_role, view_channel=False)
            await ticket_channel.set_permissions(interaction.user, view_channel=True, read_messages=True, send_messages=True)
            
            embed = common.discord.Embed(title='–ß—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å?', description='–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å.\n–¢–µ–≥–Ω–∏—Ç–µ —Ä–æ–ª—å —Ç–æ–≥–æ –∫—Ç–æ –≤–∞–º –Ω—É–∂–µ–Ω.', color=common.discord.Color.green())
            embed.set_footer(text="DOOM DAYz S.T.A.L.K.E.R RP", icon_url="https://i.imgur.com/2aGxDZe.png")
            
            await ticket_channel.send(interaction.user.mention)
            await ticket_channel.send(embed=embed, view=self.close_view_cls())
            

            await interaction.response.send_message(f"–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ù–∞–π—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç -> {ticket_channel.mention}.", ephemeral=True)
        else:
            await interaction.response.send_message("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")


class CloseView(common.discord.ui.View):
    def __init__(self, disable_on_timeout=True):
        super().__init__(timeout=None, disable_on_timeout=True)
        #self.ticket_channel = ticket_channel
        #dynamically creating the Buttons for the message depending in the list.
    async def on_timeout(self):
        super().on_timeout(self)
        print('VIEW HAS TIMED OUT')
        pass

    @common.discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=common.discord.ButtonStyle.danger, custom_id="closeview:Danger") # Create a button with the label "üòé Click me!" with color Blurple
    async def button_callback(self, button, interaction):
        # Check if the user has permission to close the ticket (only the ticket author should have permission)
        button_id = button.custom_id
        print(f"Received button click: {button_id}") #Print for the msg ID
        #if interaction.channel.name.startswith('ticket-'):
        # Check if the author of the message is the ticket creator
        member_roles = [role.name for role in interaction.user.roles]
        allow =  any(role in all_admin_roles for role in member_roles)
        if interaction.channel.name[len('ticket-'):] == interaction.user or allow:
            await interaction.response.send_message("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç?", view=MakeSureView())

        else:
            await interaction.response.send_message("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã")

class MakeSureView(common.discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None, disable_on_timeout=True)
        self.yes_button = common.discord.ui.Button(style=common.discord.ButtonStyle.green, label="–î–∞", custom_id="closeview:Yes")
        self.yes_button.callback = self.on_yes_button_click
        self.add_item(self.yes_button)

         # Button 3: –ù–∞–≤–µ—Ä–Ω–æ–µ (Maybe)
        self.maybe_button = common.discord.ui.Button(style=common.discord.ButtonStyle.primary, label="–ù–µ –ó–Ω–∞—é", custom_id="closeview:Maybe")
        self.maybe_button.callback = self.on_maybe_button_click
        self.add_item(self.maybe_button)

        # Button 2: –ù–µ—Ç (No)
        self.no_button = common.discord.ui.Button(style=common.discord.ButtonStyle.red, label="–ù–µ—Ç", custom_id="closeview:No")
        self.no_button.callback = self.on_no_button_click
        self.add_item(self.no_button)

       

    async def on_yes_button_click(self, interaction: common.discord.Interaction):
        user = interaction.user
        channel = interaction.channel
        member_roles = [role.name for role in interaction.user.roles]
        allow =  any(role in all_admin_roles for role in member_roles)
        if interaction.channel.name[len('ticket-'):] == interaction.user or allow:
            await interaction.response.send_message("–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 15 —Å–µ–∫–Ω—É–¥")
            await asyncio.sleep(15)
            await interaction.channel.delete()
        else:
            await interaction.response.send_message("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã")

    async def on_no_button_click(self, interaction: common.discord.Interaction):
        await interaction.response.defer()
        user = interaction.user
        channel = interaction.channel
        await interaction.message.delete()

    async def on_maybe_button_click(self, interaction: common.discord.Interaction):
        user = interaction.user
        role = common.discord.utils.get(user.guild.roles, id=MODERATOR_ID)
        await interaction.response.send_message(f"{role.mention} –ü–æ–º–æ–≥–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫—É —Å —Ç–∏–∫–µ—Ç–æ–º")
        self.maybe_button.disabled = True
        await interaction.message.edit(view=self)

class TicketCog(common.commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @common.commands.Cog.listener()
    async def on_ready(self):
        view = OpenView(CloseView)
        viewClosed = CloseView()
        viewMaybe = MakeSureView()
        self.bot.add_view(view)
        self.bot.add_view(viewClosed)
        self.bot.add_view(viewMaybe)

    @common.commands.slash_command(name='ticket', description='Creates a ticket form',guild_ids=[common.guild_id])
    async def ticket(self,ctx):
        # Create an instance of the OpenView class and pass the view state
        embed = common.discord.Embed(title='–ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?', description="–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å.", color=common.discord.Color.gold())
        embed.set_footer(text="–ö–æ–º–∞–Ω–¥–∞ DOOM DAYz S.T.A.L.K.E.R RP", icon_url="https://i.imgur.com/2aGxDZe.png")
        await ctx.send(embed=embed, view=OpenView(CloseView))

    

async def setup(bot):
    await bot.add_cog(TicketCog(bot))


    